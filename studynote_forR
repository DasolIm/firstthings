# csv 불러오기

setwd(“D:/you/make/me/complete/mess.csv”)
lukes_readcsv <- read.csv(“csv/lukes.csv”) 
[tab으로 csv 찾기 가능]

# 데이터가 너무 클 때, 빠르게 처리해주는 라이브러리, library(data.table)
‘fread’ (fast read의 약자) 사용! ‘fread’는 상위/하위 5개의 데이터를 출력해 보여줌
# 데이터가 숫자로 읽히지 않을 때는 경고문구 읽기, 여기서는 ‘bit64’를 installing하라는 문구가 나와서 installing 해주고 library로 사용해 줌

library(data.table)
install.packages(“bit64”)
library(bit64)
lukes_fread <- read.csv(“csv/lukes.csv”) 

# dyplr에서 tibble이라는 명령어: 데이터를 빠르게 불러오기, 타입 보여주기, row와 column 개수 알려주기

library(dplyr)
lukes_fread :: tibble()

# xlsx 열기
# 열기 원하는 sheet가 있으면 명시해 주기

library(readxl)
ashtons_xlsx <- read_excel(“xlsx/withthe/ghostofyou.xlsx”), sheet = “drum”)

# google sheets 열기
# 명령어로 access할 것이냐고 문구가 뜨면, yes로 selection 해줌

gsheet_link <- “https://docs.google.com/blahblahblah”
calums_gsheet <- read_sheet(gsheet_link, sheet = “base”)
test_gsheet <- read_sheet(gsheet_link, sheet = “test”)

# 저장하려면 write.csv 명령어 사용하기
# row.names는 row에 number를 붙일 것인지 물어보는 것! F나 T로 대답하면 되고, T로 대답하는 경우 강제로 row에 숫자 순서가 매겨지게 됨

write.csv(michaels_readcsv, “csv/write_name.csv”, row.names = F)

# 여러가지 데이터 형태 요약 – R script
1) CSV
read.csv(“csv/youngblood.csv”)
fread(“csv/youngblood.csv”)
2) XLSX
read_excel(“xlsx/dancearoundthelivingroom.xlsx”, sheet=“calm”)
3) GSHEET
read_gsheet(gsheet_link, sheet=“ash”)


# crtl + shift + M : %>%
# crtl + shift + H : 파일 위치 찾기
# alt + - : <-

# library(dplyr)을 실행하면, %>% 코드 체계를 실행할 수 있음

library(dplyr) 
5sos <- 5SOS5 %>%
     filter(track_number < 15) %>%
     group_by (dance_genre) %>%
     summarise(avg_long = mean long)

---> console
5sos 3:01

# FILTER의 개념, for row

1) ==
band_info %>% 
  filter(member == 'Calum')

2) !=
band_info %>% 
  filter(member != 'Ashton')
band_info %>%  
  filter(!member ==’Ashton’)      

3) AND
band_info %>% 
  filter(member == 'Michael' &
       role == ‘guitar’)
band_info %>% 
  filter(member == ’Michael’ ,
       role == ‘guitar’)
band_info %>% 
  filter(member == 'Michael') %>% 
  filter(role == ‘guitar‘)

4) OR
band_info %>% 
  filter(member == ’Luke‘ |
       member == ’Ashton‘) %>%
band_info %>%
  filter(member %in% c ’Luke‘, ’Ashton‘)     ##include 조건

5) OR – Module로 묶어서 간단하게 이용하기
5sos_2 <- c (’Luke‘, ’Ashton‘)
band_info %>%
  filter(member %in% 5sos_2)

6) NA
band_info %>%
  filter(member %>% is.na)
band_info %>%
  filter(!member %>% is.na)

7) 특정 단어 포함되는 데이터 찾기
library(stringr)
band_info %>%
  filter(member %>% str_detect “lum”)

# MUTATE의 개념, for column

1) Add column
5sos %>%
  select( -name, -role, -age, -ability)
  mutate( tag = height*10 )

2) 조건문
ifelse(조건, “맞을 경우”, “아닌 경우”)

mutate(adult_yn = ifelse(age<20, “미성년자”, “성인”)

3) 사칙연산
5sos %>%
  mutate(ord_dc = ord_amt – ord_profit)

4) 문자 전처리 : str_sub
5sos %>%
  mutate(ord_no = ord_cd %>% str_sub (3,7) )
  select(ord_num, ord_no, cust_nm, state, city)

5) 문자 전처리 : str_replace
5sos %>%
  mutate(catg_1 = catg_1 %>% str_replace_all “Electronics”, ‘eltr’)

6) 날짜 전처리 : sub_str
5sos %>%
  mutate(year = ord_dt %>% str_sub (7,11) ,
         month = ord_dt %>% str_sub (1,2) ,
         year = ord_dt %>% str_sub (4,5)
         )

7) paste
paste0(“오소스”, “내한”, “얼른 하라구”)
          -> “오소스내한얼른 하라구”
paste(“오소스”, “내한”, “얼른 하라구”)
          -> “오소스 내한 얼른 하라구”


5sos %>%
  mutate(ord_dt_ymd = paste0(year,“-”,month,“-”,day)
         )

8) library(lubridate)
5sos %>%
  mutate(ord_ymd = ord_dt %>% dmy() ,
         ord_ymd_1 = ord_ymd + days(30) )
 
ord_info %>% 
  mutate(ord_ymd = ord_dt %>% dmy() ,
         ord_week = ord_ymd %>% week() ,
         ord_dow_default = ord_dt %>% wday() ,
         ord_dow_label = ord_dt wday(label = T) )

9) distinct
ord_prd %>% 
  distinct(catg_2, .keep_all = T)

# ARRANGE

1) 단일 정렬
cust_info %>%
 arrange(age)
cust_info %>%
 arrange(age %>% desc)

2) 복합 정렬
cust_info %>%
  select(cust_nm, age, tenure, job) %>%
  arrange(tenure %>% desc, age %>% desc)

# JOIN
left_join(a_table, b_table, by = “ord_cd”)
right_join(a_table, b_table, by = “ord_cd”)
inner_join(a_table, b_table, by = “ord_cd”)
full_join(a_table, b_table, by = “ord_cd”)

# Casting : longformat -> wideformat
dcast.data.table(
	data = Table(data.table type)
	formula = ord_month ~ catg_1,
	value.var = “rev”,
	fun.aggregate = sum,
	fill = 0) 
 
formula = 행~열
value.var = “값”
fun.aggregate = 집계 기준(sum, mean, length)
fill = NA 표기
  data.table()
wide_format <- long_format %>%
  dcast.data.table(formula = ord_month ~ catg_1,
                 value.var = “rev”,
                 fun.aggregate = sum,
                 fill = 0) %>%
                 tibble()

# Melting : wideformat -> longformat
melt.data.table(id.vars = 컬럼으로 구성될 값 [차원],
              measure.vars = 측정치로 구성될 값)

long_format <- wide_format %>%
  data.table() %>%
  melt.data.table(id.vars = c (“ord_month”)) %>%
  tibble()

# 소스 파일을 통한 모듈화
library(dplyr)
library(data.table)
library(lubridate)
library(stringr)
library(readxl)
library(clipr)
library(writexl)
Sys.time() %>% print
등 필요한 라이브러리를 적어놓고 이 파일을 R로 저장

나중에 새로운 Rstudio 파일을 만들고, 라이브러리를 실행해야 할 때,
source(“라이브러리를 많이 저장해놓은 R파일경로 불러오기”)를
이용하면 바로 라이브러리들이 적용되고 이를 이용할 수 있음

